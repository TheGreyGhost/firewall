Basic design ideas:

Use ebtables to filter traffic based on ip and MAC
Use ebtables to log DNS requests- source, dest, query  (outgoing, ingoing, or both?
use crontab to update ebtable rules based on time and updates to block/unblock:
1) check owner: if blocked/unblocked, apply.  Else,
2) check client: if blocked/unblocked, apply.  Else,
3) check timetable.  If whitelist, check whitelist IPs.

If client or owner status is blocked until or unblocked until, and the time has expired, then revert to:
1) default if timetable is null
2) timetable if timetable is not null

ebtables should log to tmp :
DNS requests
dropped clients (MAC)
outgoing requests (MAC, dest IP, dest port) 

crontab every minute:
review log, update a tmp db with a summary of requests and time.
When the tmp db reaches size limit, write to permanent db (purge records older than a given time, append new)

table for clients
MAC : IP : name : owner : status : time : timetable
owner is linked to owner table  
status is
  default
  blocked until {time}
  unblocked until {time}
  following timetable {timetable}

table for owner
name : status : time : timetable
name is eg
  guest
  unrestricted
  unknown
  john
  mary
status is
  default
  blocked until {time}
  unblocked until {time}
  following timetable {timetable}

table for timetable
timetablename : access : day (mtwtfss) : starttime : endtime
access is 'full' (any IP) or 'whitelist'

table for dnstable
IP : address

how to handle unknown MAC?
handle as "unknown" rules

table for whitelist IP

questions -
how to allow owner to start/stop their own time?
how to record duration of time spent?
how to prevent caching up of manga?

-------------
SELECT clients.MAC, clients.status as clientstatus, clients.endtime as clientendtime, 
owners.status as ownerstatus, owners.time as ownerendtime, owners.timetable
FROM clients LEFT JOIN owners on clients.owner = owners.name
-----------
23 Jul 2018
Step 1:
Write function to look up a MAC and get the access rights for it based on the current time

tests for getaccess:
1) MAC with owner that is blocked and device that is unblocked.  Repeat for time elapsed
2) MAC with owner that is unblocked, and device that is blocked.  Repeat for time elapsed.
3) unknown MAC - 'unknown' is unblocked until xxx. Repeat for time elapsed
4) known device with NULL owner.  As per 3.

Step 2:
ebtables rules generator to generate appropriate rules for all database entries
use a crontab or similar to update periodically (every 5 minutes)
commit

Step 3:
use log and rsyslogd and a named pipe to track:
1) unknown MACs
2) unknown IPs
3) IP src and dst

Accumulate these in an internal structure then periodically upload to mysql (eg hourly; or upon trigger)
entries: clump together in 10 minute intervals:
src IP:port + dst IP:port, packet count

2018-08-11T16:21:09.503819+09:30 garden kernel: [103105.328637] EBTABLESLOGINFO IN=enxa0cec81d71e2 OUT=enxb827eb8cefb8 MAC source = 38:2c:4a:64:d1:50 MAC dest = a4:91:b1:4f:6b:e8 proto = 0x0800 IP SRC=192.168.1.200 IP DST=203.47.10.37, IP tos=0x00, IP proto=6 SPT=55028 DPT=8080

----
test:
logdatabase:
1) add_log_entry_string
2) write_to_database
use dbaccess with testaddrows and with 
testreadwrite

four tables:
UNKNOWN_MACS_LOG (mac, count, timestart, timefinish)
UNKNOWN_IPS_LOG (ip, count, timestart, timefinish)
IP_TRAFFIC_IN_LOG (srcIP:port;dstIP:port, count, timestart, timefinish)
IP_TRAFFIC_OUT_LOG (srcIP:port;dstIP:port, count, timestart, timefinish)








